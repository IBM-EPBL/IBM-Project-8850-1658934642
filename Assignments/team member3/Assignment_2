{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "lwEL13hsNw1U"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import sklearn as sk"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BYAFL3P-N649"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "gF17YXH9N7JN"
      },
      "outputs": [],
      "source": [
        "# libraries for deep learning - Tensorflow and keras\n",
        "data =pd.read_csv(\"Churn_Modelling.csv\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "15VRdaG6OjO7",
        "outputId": "d4c341da-72a3-4733-f6e8-cee01f0234ac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
              "0          1    15634602  Hargrave          619    France  Female   42   \n",
              "1          2    15647311      Hill          608     Spain  Female   41   \n",
              "2          3    15619304      Onio          502    France  Female   42   \n",
              "3          4    15701354      Boni          699    France  Female   39   \n",
              "4          5    15737888  Mitchell          850     Spain  Female   43   \n",
              "\n",
              "   Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0       2       0.00              1          1               1   \n",
              "1       1   83807.86              1          0               1   \n",
              "2       8  159660.80              3          1               0   \n",
              "3       1       0.00              2          0               0   \n",
              "4       2  125510.82              1          1               1   \n",
              "\n",
              "   EstimatedSalary  Exited  \n",
              "0        101348.88       1  \n",
              "1        112542.58       0  \n",
              "2        113931.57       1  \n",
              "3         93826.63       0  \n",
              "4         79084.10       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af27285e-945a-47d3-aead-b0b8d629d974\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af27285e-945a-47d3-aead-b0b8d629d974')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-af27285e-945a-47d3-aead-b0b8d629d974 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-af27285e-945a-47d3-aead-b0b8d629d974');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "data.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Uj-QvzPhOpZ3"
      },
      "source": [
        "PERFORM  Virtualizations\n",
        "\n",
        "1.Univariate Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 386
        },
        "id": "PzPjqVFrOqH0",
        "outputId": "c85d4ac0-0c49-4167-c41e-8b4f47aac41d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x7feece38e3d0>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.displot(data['Age'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WT6cDPNATVjI"
      },
      "source": [
        "2.Bivariate Analysis\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 513
        },
        "id": "4z52Qhu5OwDl",
        "outputId": "c272dcef-4be6-4383-ef3e-f4c72700eeca"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.JointGrid at 0x7feec85c3150>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.jointplot(data['Age'],data['Tenure'],kind=\"kde\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZoHJdq5eO58r"
      },
      "source": [
        "3.Multivariate Analysis"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "QbKB5P2-O6K0",
        "outputId": "a2165268-5000-4334-87ed-67a5a79a8388"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feec7d77850>"
            ]
          },
          "metadata": {},
          "execution_count": 23
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.lineplot(data['Age'],data['EstimatedSalary'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "3SgG03-VO-7k",
        "outputId": "d0a3018d-8884-4cbd-a8a9-38491e07a5e2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId  Surname  CreditScore  Geography  Gender    Age  \\\n",
              "0         False       False    False        False      False   False  False   \n",
              "1         False       False    False        False      False   False  False   \n",
              "2         False       False    False        False      False   False  False   \n",
              "3         False       False    False        False      False   False  False   \n",
              "4         False       False    False        False      False   False  False   \n",
              "...         ...         ...      ...          ...        ...     ...    ...   \n",
              "9995      False       False    False        False      False   False  False   \n",
              "9996      False       False    False        False      False   False  False   \n",
              "9997      False       False    False        False      False   False  False   \n",
              "9998      False       False    False        False      False   False  False   \n",
              "9999      False       False    False        False      False   False  False   \n",
              "\n",
              "      Tenure  Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0      False    False          False      False           False   \n",
              "1      False    False          False      False           False   \n",
              "2      False    False          False      False           False   \n",
              "3      False    False          False      False           False   \n",
              "4      False    False          False      False           False   \n",
              "...      ...      ...            ...        ...             ...   \n",
              "9995   False    False          False      False           False   \n",
              "9996   False    False          False      False           False   \n",
              "9997   False    False          False      False           False   \n",
              "9998   False    False          False      False           False   \n",
              "9999   False    False          False      False           False   \n",
              "\n",
              "      EstimatedSalary  Exited  \n",
              "0               False   False  \n",
              "1               False   False  \n",
              "2               False   False  \n",
              "3               False   False  \n",
              "4               False   False  \n",
              "...               ...     ...  \n",
              "9995            False   False  \n",
              "9996            False   False  \n",
              "9997            False   False  \n",
              "9998            False   False  \n",
              "9999            False   False  \n",
              "\n",
              "[10000 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d6cfc555-3c72-463e-8bae-cdeff404245e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 14 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d6cfc555-3c72-463e-8bae-cdeff404245e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-d6cfc555-3c72-463e-8bae-cdeff404245e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-d6cfc555-3c72-463e-8bae-cdeff404245e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "data.isnull()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZX83zqM1PDSb",
        "outputId": "491425c1-c364-4c5f-ce2f-900238b0be2c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          0\n",
              "CustomerId         0\n",
              "Surname            0\n",
              "CreditScore        0\n",
              "Geography          0\n",
              "Gender             0\n",
              "Age                0\n",
              "Tenure             0\n",
              "Balance            0\n",
              "NumOfProducts      0\n",
              "HasCrCard          0\n",
              "IsActiveMember     0\n",
              "EstimatedSalary    0\n",
              "Exited             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "data.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "eCqN2j02PGhW"
      },
      "outputs": [],
      "source": [
        "data['Age'].fillna(data['Age'].mean(),inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "8ITfvJkkPJXU",
        "outputId": "d6fac32f-5089-4ec9-db43-bc8b9629e574"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feec651a650>"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAWAAAAEGCAYAAABbzE8LAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAKR0lEQVR4nO3dXYjl913H8c93d6rdRHyIG1edhE7LFEsstDVLaA1KsV7UB0wvQlWsVBG8qeNWBGlF0BtBoYpxFDHUaMBSkViwlGBb4hN4EbvbRkyyUQ/pU8ak2TbYB5MmzebnxTmL27U1+3DO/zud83rdzJn/7vn/v3925r1nfnPO/9QYIwBM71D3AADrSoABmggwQBMBBmgiwABNNi7lLx89enRsbW2taBSAg+nUqVOfHmNce+H2Swrw1tZWTp48ubypANZAVX38K223BAHQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMECTS3pPOPa/3d3dzGaz7jEmtbe3lyTZ3NxsnmRa29vb2dnZ6R6DKyDAB8xsNst995/O2auu6R5lMoef/GyS5LGn1+fL+fCTT3SPwBKsz1fsGjl71TV56mU/3D3GZI48dHeSrOU587XNGjBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQJNJAry7u5vd3d0pDgWwVKvs18ZK9nqB2Ww2xWEAlm6V/bIEAdBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQZGOKg+zt7eWpp57KiRMnpjjcWpvNZjn0zOgegxU79MXPZTb7vO+pCcxmsxw5cmQl+37eR8BV9fNVdbKqTp45c2YlQwCso+d9BDzGuD3J7Uly/Pjxy3potbm5mSS57bbbLufuXIITJ07k1MOf6h6DFXvuhd+Y7Zcc8z01gVX+lGENGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNNmY4iDb29tTHAZg6VbZr0kCvLOzM8VhAJZulf2yBAHQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzQRYIAmAgzQRIABmggwQBMBBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJhvdA7B8h598Ikceurt7jMkcfvIzSbJm5/xEkmPdY3CFBPiA2d7e7h5hcnt7zyZJNjfXKUjH1vLf+qAR4ANmZ2enewTgIlkDBmgiwABNBBigiQADNBFggCYCDNBEgAGaCDBAEwEGaCLAAE0EGKCJAAM0EWCAJgIM0ESAAZoIMEATAQZoIsAATQQYoIkAAzSpMcbF/+WqM0k+fpnHOprk05d5369Vznk9rNs5r9v5Jld+zi8aY1x74cZLCvCVqKqTY4zjkxxsn3DO62HdznndzjdZ3TlbggBoIsAATaYM8O0THmu/cM7rYd3Oed3ON1nROU+2BgzAl7MEAdBEgAGarDzAVfX6qvq3qppV1dtWfbxuVXV9Vf1dVT1YVQ9U1YnumaZSVYer6iNV9b7uWaZQVd9cVXdV1UNVdbqqXtM906pV1S8tvq7vr6p3V9ULu2datqq6o6oer6r7z9t2TVV9sKr+Y/HxW5ZxrJUGuKoOJ/nDJD+U5IYkP1lVN6zymPvAs0l+eYxxQ5JXJ3nLGpzzOSeSnO4eYkK3JfmbMcbLkrwiB/zcq2ozyS8mOT7GeHmSw0l+oneqlfizJK+/YNvbktwzxnhpknsWn1+xVT8CvinJbIzx8BjjmSR/keSWFR+z1Rjj0THGhxe3P5/5N+Vm71SrV1XXJfmRJO/snmUKVfVNSb4/yZ8kyRjjmTHGf/VONYmNJEeqaiPJVUn+s3mepRtj/GOSJy7YfEuSOxe370zyhmUca9UB3kzyyfM+fyRrEKNzqmoryauS3Ns7ySR+L8mvJHmue5CJvDjJmSR/ulh2eWdVXd091CqNMfaSvCPJJ5I8muSzY4wP9E41mWNjjEcXtx9LcmwZO/VLuBWpqm9I8ldJ3jrG+Fz3PKtUVT+a5PExxqnuWSa0keR7kvzRGONVSf47S/qxdL9arHvekvl/Pt+Z5OqqelPvVNMb8+fuLuX5u6sO8F6S68/7/LrFtgOtql6QeXzfNcZ4T/c8E7g5yY9V1ccyX2b6gar6896RVu6RJI+MMc79dHNX5kE+yH4wyUfHGGfGGF9K8p4k39s801Q+VVXfkSSLj48vY6erDvCHkry0ql5cVV+X+YL9e1d8zFZVVZmvC54eY/xu9zxTGGO8fYxx3RhjK/N/478dYxzoR0ZjjMeSfLKqvmux6XVJHmwcaQqfSPLqqrpq8XX+uhzwXzye571J3ry4/eYkf72MnW4sYydfzRjj2ar6hSTvz/w3pneMMR5Y5TH3gZuT/HSSf62q+xbbfnWMcXfjTKzGTpJ3LR5cPJzkZ5vnWakxxr1VdVeSD2f+bJ+P5AC+LLmq3p3ktUmOVtUjSX49yW8l+cuq+rnML8n7xqUcy0uRAXr4JRxAEwEGaCLAAE0EGKCJAAM0WenT0OBiVNW3Zn6BkyT59iRnM3+Zb5LctLiOCBw4nobGvlJVv5HkC2OMd6xo/4fHGGdXsW+4VJYg2Jeq6saq+oeqOlVV7z/vZaB/X1W/XVX/XFX/XlXft9j+M1X1B+fd/31V9drF7S9U1e9U1b8keU1VvWlx//uq6o8Xl02FyQkw+1El2U1y6xjjxiR3JPnN8/58Y4xxU5K3Zv4qpedzdZJ7xxivSPKZJD+e5OYxxiszX+74qWUODxfLGjD70dcneXmSD84vOZDDmV/+8JxzFzg6lWTrIvZ3NvOLIyXz6xfcmORDi30fyZIurAKXSoDZjyrJA2OMr/YWP08vPp7N/34NP5sv/4nu/LfK+eJ5676V5M4xxtuXNSxcLksQ7EdPJ7n23HusVdULquq7n+c+H0vyyqo6VFXXZ/5uLF/JPUlurapvW+z7mqp60ZLmhkviETD70XNJbk3y+4u3/tnI/B03/r8r6f1Tko9mfknI05lfsev/GGM8WFW/luQDVXUoyZeSvCXzK1zBpDwNDaCJJQiAJgIM0ESAAZoIMEATAQZoIsAATQQYoMn/ACBN4bzwbkRmAAAAAElFTkSuQmCC\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.boxplot(data['Tenure'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "orTC8m20PQp3"
      },
      "source": [
        "1.Perform Descriptive Statistics"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "HOxK1d21PQ6s"
      },
      "outputs": [],
      "source": [
        "df =pd.read_csv('/content/Churn_Modelling.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "oocaqnX_Pap1",
        "outputId": "933db7d6-f976-4a93-9293-27c3afb531fc"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId    Surname  CreditScore Geography  Gender  Age  \\\n",
              "0             1    15634602   Hargrave          619    France  Female   42   \n",
              "1             2    15647311       Hill          608     Spain  Female   41   \n",
              "2             3    15619304       Onio          502    France  Female   42   \n",
              "3             4    15701354       Boni          699    France  Female   39   \n",
              "4             5    15737888   Mitchell          850     Spain  Female   43   \n",
              "...         ...         ...        ...          ...       ...     ...  ...   \n",
              "9995       9996    15606229   Obijiaku          771    France    Male   39   \n",
              "9996       9997    15569892  Johnstone          516    France    Male   35   \n",
              "9997       9998    15584532        Liu          709    France  Female   36   \n",
              "9998       9999    15682355  Sabbatini          772   Germany    Male   42   \n",
              "9999      10000    15628319     Walker          792    France  Female   28   \n",
              "\n",
              "      Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0          2       0.00              1          1               1   \n",
              "1          1   83807.86              1          0               1   \n",
              "2          8  159660.80              3          1               0   \n",
              "3          1       0.00              2          0               0   \n",
              "4          2  125510.82              1          1               1   \n",
              "...      ...        ...            ...        ...             ...   \n",
              "9995       5       0.00              2          1               0   \n",
              "9996      10   57369.61              1          1               1   \n",
              "9997       7       0.00              1          0               1   \n",
              "9998       3   75075.31              2          1               0   \n",
              "9999       4  130142.79              1          1               0   \n",
              "\n",
              "      EstimatedSalary  Exited  \n",
              "0           101348.88       1  \n",
              "1           112542.58       0  \n",
              "2           113931.57       1  \n",
              "3            93826.63       0  \n",
              "4            79084.10       0  \n",
              "...               ...     ...  \n",
              "9995         96270.64       0  \n",
              "9996        101699.77       0  \n",
              "9997         42085.58       1  \n",
              "9998         92888.52       1  \n",
              "9999         38190.78       0  \n",
              "\n",
              "[10000 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ebc8f45-d33c-4d53-8f0f-fa18a2a3c06a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>9996</td>\n",
              "      <td>15606229</td>\n",
              "      <td>Obijiaku</td>\n",
              "      <td>771</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>39</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>96270.64</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>9997</td>\n",
              "      <td>15569892</td>\n",
              "      <td>Johnstone</td>\n",
              "      <td>516</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "      <td>57369.61</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101699.77</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>9998</td>\n",
              "      <td>15584532</td>\n",
              "      <td>Liu</td>\n",
              "      <td>709</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>36</td>\n",
              "      <td>7</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>42085.58</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>9999</td>\n",
              "      <td>15682355</td>\n",
              "      <td>Sabbatini</td>\n",
              "      <td>772</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>42</td>\n",
              "      <td>3</td>\n",
              "      <td>75075.31</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>92888.52</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>10000</td>\n",
              "      <td>15628319</td>\n",
              "      <td>Walker</td>\n",
              "      <td>792</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>28</td>\n",
              "      <td>4</td>\n",
              "      <td>130142.79</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>38190.78</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 14 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ebc8f45-d33c-4d53-8f0f-fa18a2a3c06a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5ebc8f45-d33c-4d53-8f0f-fa18a2a3c06a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5ebc8f45-d33c-4d53-8f0f-fa18a2a3c06a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ibW_efFyPegV",
        "outputId": "a06f6259-363c-43a7-8522-cf9e747d5e19"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0    37\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "# mode\n",
        "df['Age'].mode()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yAyCHNkEPiK1",
        "outputId": "24a64756-33c8-467f-9f3b-4f966da97ca8"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38.9218"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "df[\"Age\"].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4-1JH7NPkYv",
        "outputId": "956c7a32-ad1f-4457-d299-9ece48ade2af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "38.92"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ],
      "source": [
        "round(df[\"Age\"].mean(), 2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HkT66LpAPmw1",
        "outputId": "52ecb5eb-05ec-4f3a-eff2-e7aab3eb2895"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "37.0"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "df[\"Age\"].median()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wdHQLdNlPp-T",
        "outputId": "0347c832-27c0-4481-f09c-866fd2a10796"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "74"
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ],
      "source": [
        "# Range\n",
        "df['Age'].max() - df['Age'].min()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zd4wRCe-PqF9",
        "outputId": "f22b15ad-a73a-4253-882a-57258b87f5fe"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "10.49"
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ],
      "source": [
        "# standard deviation\n",
        "round(df['Age'].std(),2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "DbysPeaGPuad",
        "outputId": "9f7b43b2-5e9d-4d94-e0d3-765ad23b5658"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       RowNumber   CustomerId  CreditScore       Age    Tenure    Balance  \\\n",
              "count   10000.00     10000.00     10000.00  10000.00  10000.00   10000.00   \n",
              "mean     5000.50  15690940.57       650.53     38.92      5.01   76485.89   \n",
              "std      2886.90     71936.19        96.65     10.49      2.89   62397.41   \n",
              "min         1.00  15565701.00       350.00     18.00      0.00       0.00   \n",
              "25%      2500.75  15628528.25       584.00     32.00      3.00       0.00   \n",
              "50%      5000.50  15690738.00       652.00     37.00      5.00   97198.54   \n",
              "75%      7500.25  15753233.75       718.00     44.00      7.00  127644.24   \n",
              "max     10000.00  15815690.00       850.00     92.00     10.00  250898.09   \n",
              "\n",
              "       NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary   Exited  \n",
              "count       10000.00   10000.00        10000.00         10000.00  10000.0  \n",
              "mean            1.53       0.71            0.52        100090.24      0.2  \n",
              "std             0.58       0.46            0.50         57510.49      0.4  \n",
              "min             1.00       0.00            0.00            11.58      0.0  \n",
              "25%             1.00       0.00            0.00         51002.11      0.0  \n",
              "50%             1.00       1.00            1.00        100193.92      0.0  \n",
              "75%             2.00       1.00            1.00        149388.25      0.0  \n",
              "max             4.00       1.00            1.00        199992.48      1.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-753ce093-c11d-4268-afd1-28fe45f1fb53\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.00</td>\n",
              "      <td>10000.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5000.50</td>\n",
              "      <td>15690940.57</td>\n",
              "      <td>650.53</td>\n",
              "      <td>38.92</td>\n",
              "      <td>5.01</td>\n",
              "      <td>76485.89</td>\n",
              "      <td>1.53</td>\n",
              "      <td>0.71</td>\n",
              "      <td>0.52</td>\n",
              "      <td>100090.24</td>\n",
              "      <td>0.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>2886.90</td>\n",
              "      <td>71936.19</td>\n",
              "      <td>96.65</td>\n",
              "      <td>10.49</td>\n",
              "      <td>2.89</td>\n",
              "      <td>62397.41</td>\n",
              "      <td>0.58</td>\n",
              "      <td>0.46</td>\n",
              "      <td>0.50</td>\n",
              "      <td>57510.49</td>\n",
              "      <td>0.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.00</td>\n",
              "      <td>15565701.00</td>\n",
              "      <td>350.00</td>\n",
              "      <td>18.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>11.58</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2500.75</td>\n",
              "      <td>15628528.25</td>\n",
              "      <td>584.00</td>\n",
              "      <td>32.00</td>\n",
              "      <td>3.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>51002.11</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5000.50</td>\n",
              "      <td>15690738.00</td>\n",
              "      <td>652.00</td>\n",
              "      <td>37.00</td>\n",
              "      <td>5.00</td>\n",
              "      <td>97198.54</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>100193.92</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>7500.25</td>\n",
              "      <td>15753233.75</td>\n",
              "      <td>718.00</td>\n",
              "      <td>44.00</td>\n",
              "      <td>7.00</td>\n",
              "      <td>127644.24</td>\n",
              "      <td>2.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>149388.25</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>10000.00</td>\n",
              "      <td>15815690.00</td>\n",
              "      <td>850.00</td>\n",
              "      <td>92.00</td>\n",
              "      <td>10.00</td>\n",
              "      <td>250898.09</td>\n",
              "      <td>4.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>1.00</td>\n",
              "      <td>199992.48</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-753ce093-c11d-4268-afd1-28fe45f1fb53')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-753ce093-c11d-4268-afd1-28fe45f1fb53 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-753ce093-c11d-4268-afd1-28fe45f1fb53');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ],
      "source": [
        "# summary statistics for all numerical columns\n",
        "round(df.describe(),2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 37,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d4qPzfHIPwkr",
        "outputId": "72e2ffc0-438b-468c-f5e3-343023105ea7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          0\n",
              "CustomerId         0\n",
              "Surname            0\n",
              "CreditScore        0\n",
              "Geography          0\n",
              "Gender             0\n",
              "Age                0\n",
              "Tenure             0\n",
              "Balance            0\n",
              "NumOfProducts      0\n",
              "HasCrCard          0\n",
              "IsActiveMember     0\n",
              "EstimatedSalary    0\n",
              "Exited             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 37
        }
      ],
      "source": [
        "df.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "d7z9dsdSPy-r",
        "outputId": "35f962a4-d71d-4c44-87c1-d437f59b71c7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId      Surname  CreditScore Geography  Gender  Age  \\\n",
              "0             1    15634602     Hargrave          619    France  Female   42   \n",
              "1             2    15647311         Hill          608     Spain  Female   41   \n",
              "2             3    15619304         Onio          502    France  Female   42   \n",
              "3             4    15701354         Boni          699    France  Female   39   \n",
              "4             5    15737888     Mitchell          850     Spain  Female   43   \n",
              "...         ...         ...          ...          ...       ...     ...  ...   \n",
              "9992       9993    15657105  Chukwualuka          726     Spain    Male   36   \n",
              "9994       9995    15719294         Wood          800    France  Female   29   \n",
              "9995       9996    15606229     Obijiaku          771    France    Male   39   \n",
              "9996       9997    15569892    Johnstone          516    France    Male   35   \n",
              "9998       9999    15682355    Sabbatini          772   Germany    Male   42   \n",
              "\n",
              "      Tenure    Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0          2       0.00              1          1               1   \n",
              "1          1   83807.86              1          0               1   \n",
              "2          8  159660.80              3          1               0   \n",
              "3          1       0.00              2          0               0   \n",
              "4          2  125510.82              1          1               1   \n",
              "...      ...        ...            ...        ...             ...   \n",
              "9992       2       0.00              1          1               0   \n",
              "9994       2       0.00              2          0               0   \n",
              "9995       5       0.00              2          1               0   \n",
              "9996      10   57369.61              1          1               1   \n",
              "9998       3   75075.31              2          1               0   \n",
              "\n",
              "      EstimatedSalary  Exited  \n",
              "0           101348.88       1  \n",
              "1           112542.58       0  \n",
              "2           113931.57       1  \n",
              "3            93826.63       0  \n",
              "4            79084.10       0  \n",
              "...               ...     ...  \n",
              "9992        195192.40       0  \n",
              "9994        167773.55       0  \n",
              "9995         96270.64       0  \n",
              "9996        101699.77       0  \n",
              "9998         92888.52       1  \n",
              "\n",
              "[7039 rows x 14 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fc2b5eae-2db0-4778-8216-ebe736ca97e3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9992</th>\n",
              "      <td>9993</td>\n",
              "      <td>15657105</td>\n",
              "      <td>Chukwualuka</td>\n",
              "      <td>726</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Male</td>\n",
              "      <td>36</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>195192.40</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9994</th>\n",
              "      <td>9995</td>\n",
              "      <td>15719294</td>\n",
              "      <td>Wood</td>\n",
              "      <td>800</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>29</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>167773.55</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>9996</td>\n",
              "      <td>15606229</td>\n",
              "      <td>Obijiaku</td>\n",
              "      <td>771</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>39</td>\n",
              "      <td>5</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>96270.64</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>9997</td>\n",
              "      <td>15569892</td>\n",
              "      <td>Johnstone</td>\n",
              "      <td>516</td>\n",
              "      <td>France</td>\n",
              "      <td>Male</td>\n",
              "      <td>35</td>\n",
              "      <td>10</td>\n",
              "      <td>57369.61</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101699.77</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>9999</td>\n",
              "      <td>15682355</td>\n",
              "      <td>Sabbatini</td>\n",
              "      <td>772</td>\n",
              "      <td>Germany</td>\n",
              "      <td>Male</td>\n",
              "      <td>42</td>\n",
              "      <td>3</td>\n",
              "      <td>75075.31</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>92888.52</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7039 rows × 14 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc2b5eae-2db0-4778-8216-ebe736ca97e3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fc2b5eae-2db0-4778-8216-ebe736ca97e3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fc2b5eae-2db0-4778-8216-ebe736ca97e3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ],
      "source": [
        "df.loc[df['EstimatedSalary']>60000]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 39,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "id": "h8ndY2fDP11I",
        "outputId": "04d9f7d6-98ae-444f-fa15-0e4fc3cf338f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   CustomerId   Surname\n",
              "0    15634602  Hargrave\n",
              "1    15647311      Hill\n",
              "2    15619304      Onio"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b06dc78-c4fe-45b1-bc09-c27ae8079b9b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b06dc78-c4fe-45b1-bc09-c27ae8079b9b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5b06dc78-c4fe-45b1-bc09-c27ae8079b9b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5b06dc78-c4fe-45b1-bc09-c27ae8079b9b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 39
        }
      ],
      "source": [
        "df.iloc[0:3,1:3]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 40,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XseZPmPtP184",
        "outputId": "5cebc6c5-1cf7-40e9-ac8c-f586d5b1a2d2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 10000 entries, 0 to 9999\n",
            "Data columns (total 14 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   RowNumber        10000 non-null  int64  \n",
            " 1   CustomerId       10000 non-null  int64  \n",
            " 2   Surname          10000 non-null  object \n",
            " 3   CreditScore      10000 non-null  int64  \n",
            " 4   Geography        10000 non-null  object \n",
            " 5   Gender           10000 non-null  object \n",
            " 6   Age              10000 non-null  int64  \n",
            " 7   Tenure           10000 non-null  int64  \n",
            " 8   Balance          10000 non-null  float64\n",
            " 9   NumOfProducts    10000 non-null  int64  \n",
            " 10  HasCrCard        10000 non-null  int64  \n",
            " 11  IsActiveMember   10000 non-null  int64  \n",
            " 12  EstimatedSalary  10000 non-null  float64\n",
            " 13  Exited           10000 non-null  int64  \n",
            "dtypes: float64(2), int64(9), object(3)\n",
            "memory usage: 1.1+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "b1pmGEBzSksT"
      },
      "source": [
        "5.Handle the missing values"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 41,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gcET2dbNP7ir",
        "outputId": "20ffe360-a536-42ab-fdc2-b667c18c9e24"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          0\n",
              "CustomerId         0\n",
              "Surname            0\n",
              "CreditScore        0\n",
              "Geography          0\n",
              "Gender             0\n",
              "Age                0\n",
              "Tenure             0\n",
              "Balance            0\n",
              "NumOfProducts      0\n",
              "HasCrCard          0\n",
              "IsActiveMember     0\n",
              "EstimatedSalary    0\n",
              "Exited             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ],
      "source": [
        "data.isnull().sum() # missing value check"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bo4gG0nXP9jL"
      },
      "source": [
        "1.Find the outliers and replace the outliers\n",
        "Method to outlier detection"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 42,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "FM8dm0faP9tc",
        "outputId": "130dc9a0-8d6d-4abc-be3a-697d4ac8b1b1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber   CustomerId  CreditScore   Age  Tenure    Balance  \\\n",
              "0.25    2500.75  15628528.25        584.0  32.0     3.0       0.00   \n",
              "0.75    7500.25  15753233.75        718.0  44.0     7.0  127644.24   \n",
              "\n",
              "      NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  Exited  \n",
              "0.25            1.0        0.0             0.0       51002.1100     0.0  \n",
              "0.75            2.0        1.0             1.0      149388.2475     0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dd4dbf12-e324-4c65-9079-88433091f6cf\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.25</th>\n",
              "      <td>2500.75</td>\n",
              "      <td>15628528.25</td>\n",
              "      <td>584.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>3.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>51002.1100</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0.75</th>\n",
              "      <td>7500.25</td>\n",
              "      <td>15753233.75</td>\n",
              "      <td>718.0</td>\n",
              "      <td>44.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>127644.24</td>\n",
              "      <td>2.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>149388.2475</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dd4dbf12-e324-4c65-9079-88433091f6cf')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-dd4dbf12-e324-4c65-9079-88433091f6cf button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-dd4dbf12-e324-4c65-9079-88433091f6cf');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ],
      "source": [
        "qnt = data.quantile(q =(0.25,0.75))\n",
        "qnt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dTRHYO-ZQFc9"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 43,
      "metadata": {
        "id": "tZdP7Ng1QHgn"
      },
      "outputs": [],
      "source": [
        "iqr = qnt.loc[0.75]-qnt.loc[0.25]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 44,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gGt4jD1aQLUV",
        "outputId": "38cd4490-f05c-40bf-d2b6-abaef9f445c3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber            4999.5000\n",
              "CustomerId         124705.5000\n",
              "CreditScore           134.0000\n",
              "Age                    12.0000\n",
              "Tenure                  4.0000\n",
              "Balance            127644.2400\n",
              "NumOfProducts           1.0000\n",
              "HasCrCard               1.0000\n",
              "IsActiveMember          1.0000\n",
              "EstimatedSalary     98386.1375\n",
              "Exited                  0.0000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ],
      "source": [
        "iqr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 45,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8fTddPrEQNnv",
        "outputId": "b7a2dda0-b75b-4dba-c552-b6d58e7c65ab"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber         -4.998500e+03\n",
              "CustomerId         1.544147e+07\n",
              "CreditScore        3.830000e+02\n",
              "Age                1.400000e+01\n",
              "Tenure            -3.000000e+00\n",
              "Balance           -1.914664e+05\n",
              "NumOfProducts     -5.000000e-01\n",
              "HasCrCard         -1.500000e+00\n",
              "IsActiveMember    -1.500000e+00\n",
              "EstimatedSalary   -9.657710e+04\n",
              "Exited             0.000000e+00\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ],
      "source": [
        "lower = qnt.loc[0.25]-1.5*iqr\n",
        "lower"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vUrVB_xCQP_C",
        "outputId": "f69d8df7-6a0a-4c86-9434-8746265fa9cd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          1.499950e+04\n",
              "CustomerId         1.594029e+07\n",
              "CreditScore        9.190000e+02\n",
              "Age                6.200000e+01\n",
              "Tenure             1.300000e+01\n",
              "Balance            3.191106e+05\n",
              "NumOfProducts      3.500000e+00\n",
              "HasCrCard          2.500000e+00\n",
              "IsActiveMember     2.500000e+00\n",
              "EstimatedSalary    2.969675e+05\n",
              "Exited             0.000000e+00\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ],
      "source": [
        "upper = qnt.loc[0.75]+1.5*iqr\n",
        "upper"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RdDSPUAGQSUD",
        "outputId": "874c324b-5a38-4e8d-89cb-4c7ac83176ee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with 'numeric_only=None') is deprecated; in a future version this will raise TypeError.  Select only valid columns before calling the reduction.\n",
            "  \"\"\"Entry point for launching an IPython kernel.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RowNumber          5.000500e+03\n",
              "CustomerId         1.569094e+07\n",
              "CreditScore        6.505288e+02\n",
              "Age                3.892180e+01\n",
              "Tenure             5.012800e+00\n",
              "Balance            7.648589e+04\n",
              "NumOfProducts      1.530200e+00\n",
              "HasCrCard          7.055000e-01\n",
              "IsActiveMember     5.151000e-01\n",
              "EstimatedSalary    1.000902e+05\n",
              "Exited             2.037000e-01\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ],
      "source": [
        "data.mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "nDYiLWxnQU_8"
      },
      "outputs": [],
      "source": [
        "data['Age'] = np.where(data['Age']>87,40,data['Age'])\n",
        "data['Tenure'] = np.where(data['Tenure']>87,31,data['Tenure'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "07HLrZXyQXaL",
        "outputId": "794445b1-cc9a-4436-a70f-4a94360df3d8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7feec63f52d0>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "sns.boxplot(data['Tenure'])"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4LnYd1M6QdTX"
      },
      "source": [
        "1.Check for Categorical columns and perform encoding"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 176
        },
        "id": "T96dToK8QfOR",
        "outputId": "316449c5-ba47-4dca-d070-9a96226aaf76"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId   Surname  CreditScore Geography  Gender  Age  \\\n",
              "0          1    15634602  Hargrave          619    France  Female   42   \n",
              "1          2    15647311      Hill          608     Spain  Female   41   \n",
              "\n",
              "   Tenure   Balance  NumOfProducts  HasCrCard  IsActiveMember  \\\n",
              "0       2      0.00              1          1               1   \n",
              "1       1  83807.86              1          0               1   \n",
              "\n",
              "   EstimatedSalary  Exited  \n",
              "0        101348.88       1  \n",
              "1        112542.58       0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b519b85-35af-4286-b930-0659b9b59054\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Geography</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>France</td>\n",
              "      <td>Female</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>Spain</td>\n",
              "      <td>Female</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b519b85-35af-4286-b930-0659b9b59054')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2b519b85-35af-4286-b930-0659b9b59054 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2b519b85-35af-4286-b930-0659b9b59054');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "data.head(2)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "CsefHPs3Qkli"
      },
      "outputs": [],
      "source": [
        "data['Gender'].replace({\"Female\":0,\"Male\":1},inplace=True)\n",
        "data['Exited'].replace({\"yes\":1,\"no\":0},inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "0o7efqZkQnOL"
      },
      "outputs": [],
      "source": [
        "data_main = pd.get_dummies(data,columns=['Geography'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "9MOfyqkgQpaC",
        "outputId": "b612b562-0ce1-436d-c0ea-d9f94b48bacb"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId   Surname  CreditScore  Gender  Age  Tenure  \\\n",
              "0          1    15634602  Hargrave          619       0   42       2   \n",
              "1          2    15647311      Hill          608       0   41       1   \n",
              "2          3    15619304      Onio          502       0   42       8   \n",
              "3          4    15701354      Boni          699       0   39       1   \n",
              "4          5    15737888  Mitchell          850       0   43       2   \n",
              "\n",
              "     Balance  NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  \\\n",
              "0       0.00              1          1               1        101348.88   \n",
              "1   83807.86              1          0               1        112542.58   \n",
              "2  159660.80              3          1               0        113931.57   \n",
              "3       0.00              2          0               0         93826.63   \n",
              "4  125510.82              1          1               1         79084.10   \n",
              "\n",
              "   Exited  Geography_France  Geography_Germany  Geography_Spain  \n",
              "0       1                 1                  0                0  \n",
              "1       0                 0                  0                1  \n",
              "2       1                 1                  0                0  \n",
              "3       0                 1                  0                0  \n",
              "4       0                 0                  0                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f44eb72a-62e1-425f-b125-15c4d7156406\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>83807.86</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>159660.80</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>0</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>125510.82</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f44eb72a-62e1-425f-b125-15c4d7156406')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f44eb72a-62e1-425f-b125-15c4d7156406 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f44eb72a-62e1-425f-b125-15c4d7156406');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ],
      "source": [
        "data_main.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "nvxdoY-zQsP2"
      },
      "outputs": [],
      "source": [
        "y = data_main['Balance']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "id": "9tC2-W2bQuEY"
      },
      "outputs": [],
      "source": [
        "x= data_main.drop(columns=['Balance'],axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "4hx1G7C9QzHt",
        "outputId": "5682cdfa-97c6-49d1-c210-e6a99db36856"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId   Surname  CreditScore  Gender  Age  Tenure  \\\n",
              "0          1    15634602  Hargrave          619       0   42       2   \n",
              "1          2    15647311      Hill          608       0   41       1   \n",
              "2          3    15619304      Onio          502       0   42       8   \n",
              "3          4    15701354      Boni          699       0   39       1   \n",
              "4          5    15737888  Mitchell          850       0   43       2   \n",
              "\n",
              "   NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  Exited  \\\n",
              "0              1          1               1        101348.88       1   \n",
              "1              1          0               1        112542.58       0   \n",
              "2              3          1               0        113931.57       1   \n",
              "3              2          0               0         93826.63       0   \n",
              "4              1          1               1         79084.10       0   \n",
              "\n",
              "   Geography_France  Geography_Germany  Geography_Spain  \n",
              "0                 1                  0                0  \n",
              "1                 0                  0                1  \n",
              "2                 1                  0                0  \n",
              "3                 1                  0                0  \n",
              "4                 0                  0                1  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-65735086-d48a-4b85-bf26-fd9801cbb4b2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "      <td>619</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>101348.88</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "      <td>608</td>\n",
              "      <td>0</td>\n",
              "      <td>41</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>112542.58</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "      <td>502</td>\n",
              "      <td>0</td>\n",
              "      <td>42</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>113931.57</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "      <td>699</td>\n",
              "      <td>0</td>\n",
              "      <td>39</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93826.63</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "      <td>850</td>\n",
              "      <td>0</td>\n",
              "      <td>43</td>\n",
              "      <td>2</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>79084.10</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-65735086-d48a-4b85-bf26-fd9801cbb4b2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-65735086-d48a-4b85-bf26-fd9801cbb4b2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-65735086-d48a-4b85-bf26-fd9801cbb4b2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 56
        }
      ],
      "source": [
        "x.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R2TAP3UqQ07c"
      },
      "source": [
        "8.Split the data into dependent and independent variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "da3aFOkpQ10I",
        "outputId": "83b45ec4-25c8-44e2-d5e4-e32b33a82074"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId    Surname\n",
              "0             1    15634602   Hargrave\n",
              "1             2    15647311       Hill\n",
              "2             3    15619304       Onio\n",
              "3             4    15701354       Boni\n",
              "4             5    15737888   Mitchell\n",
              "...         ...         ...        ...\n",
              "9995       9996    15606229   Obijiaku\n",
              "9996       9997    15569892  Johnstone\n",
              "9997       9998    15584532        Liu\n",
              "9998       9999    15682355  Sabbatini\n",
              "9999      10000    15628319     Walker\n",
              "\n",
              "[10000 rows x 3 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6679c297-cffd-4d26-aee8-d7d833baa971\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>Surname</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>15634602</td>\n",
              "      <td>Hargrave</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>15647311</td>\n",
              "      <td>Hill</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>15619304</td>\n",
              "      <td>Onio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>15701354</td>\n",
              "      <td>Boni</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>15737888</td>\n",
              "      <td>Mitchell</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9995</th>\n",
              "      <td>9996</td>\n",
              "      <td>15606229</td>\n",
              "      <td>Obijiaku</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9996</th>\n",
              "      <td>9997</td>\n",
              "      <td>15569892</td>\n",
              "      <td>Johnstone</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9997</th>\n",
              "      <td>9998</td>\n",
              "      <td>15584532</td>\n",
              "      <td>Liu</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9998</th>\n",
              "      <td>9999</td>\n",
              "      <td>15682355</td>\n",
              "      <td>Sabbatini</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9999</th>\n",
              "      <td>10000</td>\n",
              "      <td>15628319</td>\n",
              "      <td>Walker</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>10000 rows × 3 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6679c297-cffd-4d26-aee8-d7d833baa971')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6679c297-cffd-4d26-aee8-d7d833baa971 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6679c297-cffd-4d26-aee8-d7d833baa971');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ],
      "source": [
        "# Independent\n",
        "x = df.iloc[:,0:3]\n",
        "x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YZTgVy8WQ55E",
        "outputId": "e09fb69f-316d-4049-c9dd-56f42325dd2b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       1\n",
              "1       0\n",
              "2       1\n",
              "3       0\n",
              "4       0\n",
              "       ..\n",
              "9995    0\n",
              "9996    0\n",
              "9997    1\n",
              "9998    1\n",
              "9999    0\n",
              "Name: Exited, Length: 10000, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ],
      "source": [
        "# Dependent\n",
        "\n",
        "y = df['Exited']\n",
        "y"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bQ5HAhiOQ99c"
      },
      "source": [
        "1.Scale the independent variables"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "PnoWptBcQ-uP"
      },
      "outputs": [],
      "source": [
        "x= data_main.drop(columns=['Surname'],axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "2FFUX3k6RCdW"
      },
      "outputs": [],
      "source": [
        "names = x.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ze4ZBXkEREJG",
        "outputId": "bd62c72c-eb3e-4118-b23c-bf140fa2b36a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['RowNumber', 'CustomerId', 'CreditScore', 'Gender', 'Age', 'Tenure',\n",
              "       'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember',\n",
              "       'EstimatedSalary', 'Exited', 'Geography_France', 'Geography_Germany',\n",
              "       'Geography_Spain'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "names"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "bciJqEDwRHEb"
      },
      "outputs": [],
      "source": [
        "from sklearn.preprocessing import scale"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "291-Pi_VRKl1"
      },
      "outputs": [],
      "source": [
        "x = scale (x)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-m8cVdukRMSC",
        "outputId": "45e3da37-e52f-48b1-df3f-7a925b993ed6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-1.73187761, -0.78321342, -0.32622142, ...,  0.99720391,\n",
              "        -0.57873591, -0.57380915],\n",
              "       [-1.7315312 , -0.60653412, -0.44003595, ..., -1.00280393,\n",
              "        -0.57873591,  1.74273971],\n",
              "       [-1.73118479, -0.99588476, -1.53679418, ...,  0.99720391,\n",
              "        -0.57873591, -0.57380915],\n",
              "       ...,\n",
              "       [ 1.73118479, -1.47928179,  0.60498839, ...,  0.99720391,\n",
              "        -0.57873591, -0.57380915],\n",
              "       [ 1.7315312 , -0.11935577,  1.25683526, ..., -1.00280393,\n",
              "         1.72790383, -0.57380915],\n",
              "       [ 1.73187761, -0.87055909,  1.46377078, ...,  0.99720391,\n",
              "        -0.57873591, -0.57380915]])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "x"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "xq8qDcLIRO8q"
      },
      "outputs": [],
      "source": [
        "x = pd.DataFrame(x,columns=names)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "GOoiY0QGRRCe",
        "outputId": "39449784-ddb5-44c9-fa4c-db9d8ce759ab"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   RowNumber  CustomerId  CreditScore    Gender       Age    Tenure   Balance  \\\n",
              "0  -1.731878   -0.783213    -0.326221 -1.095988  0.296051 -1.041760 -1.225848   \n",
              "1  -1.731531   -0.606534    -0.440036 -1.095988  0.200347 -1.387538  0.117350   \n",
              "2  -1.731185   -0.995885    -1.536794 -1.095988  0.296051  1.032908  1.333053   \n",
              "3  -1.730838    0.144767     0.501521 -1.095988  0.008939 -1.387538 -1.225848   \n",
              "4  -1.730492    0.652659     2.063884 -1.095988  0.391755 -1.041760  0.785728   \n",
              "\n",
              "   NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary    Exited  \\\n",
              "0      -0.911583   0.646092        0.970243         0.021886  1.977165   \n",
              "1      -0.911583  -1.547768        0.970243         0.216534 -0.505775   \n",
              "2       2.527057   0.646092       -1.030670         0.240687  1.977165   \n",
              "3       0.807737  -1.547768       -1.030670        -0.108918 -0.505775   \n",
              "4      -0.911583   0.646092        0.970243        -0.365276 -0.505775   \n",
              "\n",
              "   Geography_France  Geography_Germany  Geography_Spain  \n",
              "0          0.997204          -0.578736        -0.573809  \n",
              "1         -1.002804          -0.578736         1.742740  \n",
              "2          0.997204          -0.578736        -0.573809  \n",
              "3          0.997204          -0.578736        -0.573809  \n",
              "4         -1.002804          -0.578736         1.742740  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2658965f-9966-41ae-832c-7d6562317c50\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-1.731878</td>\n",
              "      <td>-0.783213</td>\n",
              "      <td>-0.326221</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.296051</td>\n",
              "      <td>-1.041760</td>\n",
              "      <td>-1.225848</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>0.021886</td>\n",
              "      <td>1.977165</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-1.731531</td>\n",
              "      <td>-0.606534</td>\n",
              "      <td>-0.440036</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.200347</td>\n",
              "      <td>-1.387538</td>\n",
              "      <td>0.117350</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>-1.547768</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>0.216534</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-1.731185</td>\n",
              "      <td>-0.995885</td>\n",
              "      <td>-1.536794</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.296051</td>\n",
              "      <td>1.032908</td>\n",
              "      <td>1.333053</td>\n",
              "      <td>2.527057</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>0.240687</td>\n",
              "      <td>1.977165</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-1.730838</td>\n",
              "      <td>0.144767</td>\n",
              "      <td>0.501521</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.008939</td>\n",
              "      <td>-1.387538</td>\n",
              "      <td>-1.225848</td>\n",
              "      <td>0.807737</td>\n",
              "      <td>-1.547768</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>-0.108918</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-1.730492</td>\n",
              "      <td>0.652659</td>\n",
              "      <td>2.063884</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.391755</td>\n",
              "      <td>-1.041760</td>\n",
              "      <td>0.785728</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>-0.365276</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2658965f-9966-41ae-832c-7d6562317c50')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-2658965f-9966-41ae-832c-7d6562317c50 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-2658965f-9966-41ae-832c-7d6562317c50');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ],
      "source": [
        "x.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wmjuvZSmRSrA"
      },
      "source": [
        "1.Split the data into training and testing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "id": "9XbbwE1WRToW"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "id": "4H8zEEJNRW3X"
      },
      "outputs": [],
      "source": [
        "x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2,random_state=0)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "k4DFZbpXRYqI",
        "outputId": "9e56a981-0c55-496e-d62d-e6b91041ed42"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId  CreditScore    Gender       Age    Tenure  \\\n",
              "7389   0.827747   -0.195066     0.170424 -1.095988 -0.469582 -0.004426   \n",
              "9275   1.481077    0.810821    -2.312802  0.912419  0.296051 -1.387538   \n",
              "2995  -0.694379   -1.507642    -1.195351 -1.095988 -0.948103 -1.041760   \n",
              "5316   0.109639    1.243462     0.035916  0.912419  0.104643 -0.004426   \n",
              "356   -1.608556   -1.100775     2.063884 -1.095988  1.731613  1.032908   \n",
              "\n",
              "       Balance  NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  \\\n",
              "7389 -1.225848       0.807737   0.646092       -1.030670         1.108382   \n",
              "9275 -0.012892      -0.911583   0.646092        0.970243        -0.747592   \n",
              "2995  0.575076      -0.911583   0.646092       -1.030670         1.487464   \n",
              "5316  0.467955      -0.911583   0.646092       -1.030670         1.278558   \n",
              "356   0.806010       0.807737   0.646092        0.970243         0.560069   \n",
              "\n",
              "        Exited  Geography_France  Geography_Germany  Geography_Spain  \n",
              "7389 -0.505775         -1.002804          -0.578736         1.742740  \n",
              "9275 -0.505775         -1.002804           1.727904        -0.573809  \n",
              "2995 -0.505775          0.997204          -0.578736        -0.573809  \n",
              "5316 -0.505775         -1.002804          -0.578736         1.742740  \n",
              "356  -0.505775         -1.002804          -0.578736         1.742740  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1e6e4095-3540-4886-84e3-d71114f876ff\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>7389</th>\n",
              "      <td>0.827747</td>\n",
              "      <td>-0.195066</td>\n",
              "      <td>0.170424</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>-0.469582</td>\n",
              "      <td>-0.004426</td>\n",
              "      <td>-1.225848</td>\n",
              "      <td>0.807737</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>1.108382</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9275</th>\n",
              "      <td>1.481077</td>\n",
              "      <td>0.810821</td>\n",
              "      <td>-2.312802</td>\n",
              "      <td>0.912419</td>\n",
              "      <td>0.296051</td>\n",
              "      <td>-1.387538</td>\n",
              "      <td>-0.012892</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>-0.747592</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>1.727904</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2995</th>\n",
              "      <td>-0.694379</td>\n",
              "      <td>-1.507642</td>\n",
              "      <td>-1.195351</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>-0.948103</td>\n",
              "      <td>-1.041760</td>\n",
              "      <td>0.575076</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>1.487464</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5316</th>\n",
              "      <td>0.109639</td>\n",
              "      <td>1.243462</td>\n",
              "      <td>0.035916</td>\n",
              "      <td>0.912419</td>\n",
              "      <td>0.104643</td>\n",
              "      <td>-0.004426</td>\n",
              "      <td>0.467955</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>1.278558</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>356</th>\n",
              "      <td>-1.608556</td>\n",
              "      <td>-1.100775</td>\n",
              "      <td>2.063884</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>1.731613</td>\n",
              "      <td>1.032908</td>\n",
              "      <td>0.806010</td>\n",
              "      <td>0.807737</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>0.560069</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e6e4095-3540-4886-84e3-d71114f876ff')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-1e6e4095-3540-4886-84e3-d71114f876ff button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-1e6e4095-3540-4886-84e3-d71114f876ff');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ],
      "source": [
        "x_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 270
        },
        "id": "Jlh_dWyRRbO3",
        "outputId": "d26e75d6-3c38-4a21-a789-f555db555aa9"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      RowNumber  CustomerId  CreditScore    Gender       Age    Tenure  \\\n",
              "9394   1.522299   -1.045250    -0.553850 -1.095988 -0.373878  1.032908   \n",
              "898   -1.420801   -0.503813    -1.319512 -1.095988  0.104643 -1.041760   \n",
              "2398  -0.901186   -0.793292     0.573948 -1.095988  0.296051  1.032908   \n",
              "5906   0.314021    0.760190     1.422384  0.912419 -0.660990 -0.350204   \n",
              "2343  -0.920239    1.042107     0.573948  0.912419 -0.086765 -0.004426   \n",
              "\n",
              "       Balance  NumOfProducts  HasCrCard  IsActiveMember  EstimatedSalary  \\\n",
              "9394  0.875323      -0.911583   0.646092        0.970243         1.613046   \n",
              "898   0.424422      -0.911583   0.646092       -1.030670         0.497532   \n",
              "2398  0.302927      -0.911583   0.646092        0.970243        -0.423561   \n",
              "5906  0.570464      -0.911583  -1.547768       -1.030670        -0.186439   \n",
              "2343  1.387129       0.807737   0.646092        0.970243         0.618560   \n",
              "\n",
              "        Exited  Geography_France  Geography_Germany  Geography_Spain  \n",
              "9394 -0.505775         -1.002804           1.727904        -0.573809  \n",
              "898   1.977165          0.997204          -0.578736        -0.573809  \n",
              "2398 -0.505775         -1.002804          -0.578736         1.742740  \n",
              "5906 -0.505775          0.997204          -0.578736        -0.573809  \n",
              "2343 -0.505775         -1.002804           1.727904        -0.573809  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ad3b853-9a7c-40a8-aa85-58b0b6fbf788\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>RowNumber</th>\n",
              "      <th>CustomerId</th>\n",
              "      <th>CreditScore</th>\n",
              "      <th>Gender</th>\n",
              "      <th>Age</th>\n",
              "      <th>Tenure</th>\n",
              "      <th>Balance</th>\n",
              "      <th>NumOfProducts</th>\n",
              "      <th>HasCrCard</th>\n",
              "      <th>IsActiveMember</th>\n",
              "      <th>EstimatedSalary</th>\n",
              "      <th>Exited</th>\n",
              "      <th>Geography_France</th>\n",
              "      <th>Geography_Germany</th>\n",
              "      <th>Geography_Spain</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>9394</th>\n",
              "      <td>1.522299</td>\n",
              "      <td>-1.045250</td>\n",
              "      <td>-0.553850</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>-0.373878</td>\n",
              "      <td>1.032908</td>\n",
              "      <td>0.875323</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>1.613046</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>1.727904</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>898</th>\n",
              "      <td>-1.420801</td>\n",
              "      <td>-0.503813</td>\n",
              "      <td>-1.319512</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.104643</td>\n",
              "      <td>-1.041760</td>\n",
              "      <td>0.424422</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>0.497532</td>\n",
              "      <td>1.977165</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2398</th>\n",
              "      <td>-0.901186</td>\n",
              "      <td>-0.793292</td>\n",
              "      <td>0.573948</td>\n",
              "      <td>-1.095988</td>\n",
              "      <td>0.296051</td>\n",
              "      <td>1.032908</td>\n",
              "      <td>0.302927</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>-0.423561</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>1.742740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5906</th>\n",
              "      <td>0.314021</td>\n",
              "      <td>0.760190</td>\n",
              "      <td>1.422384</td>\n",
              "      <td>0.912419</td>\n",
              "      <td>-0.660990</td>\n",
              "      <td>-0.350204</td>\n",
              "      <td>0.570464</td>\n",
              "      <td>-0.911583</td>\n",
              "      <td>-1.547768</td>\n",
              "      <td>-1.030670</td>\n",
              "      <td>-0.186439</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>0.997204</td>\n",
              "      <td>-0.578736</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2343</th>\n",
              "      <td>-0.920239</td>\n",
              "      <td>1.042107</td>\n",
              "      <td>0.573948</td>\n",
              "      <td>0.912419</td>\n",
              "      <td>-0.086765</td>\n",
              "      <td>-0.004426</td>\n",
              "      <td>1.387129</td>\n",
              "      <td>0.807737</td>\n",
              "      <td>0.646092</td>\n",
              "      <td>0.970243</td>\n",
              "      <td>0.618560</td>\n",
              "      <td>-0.505775</td>\n",
              "      <td>-1.002804</td>\n",
              "      <td>1.727904</td>\n",
              "      <td>-0.573809</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ad3b853-9a7c-40a8-aa85-58b0b6fbf788')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-4ad3b853-9a7c-40a8-aa85-58b0b6fbf788 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-4ad3b853-9a7c-40a8-aa85-58b0b6fbf788');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ],
      "source": [
        "x_test.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 71,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KKYGYqh5RdMg",
        "outputId": "8524af77-2725-4059-c8b1-79860a3633bf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(7389    0\n",
              " 9275    0\n",
              " 2995    0\n",
              " 5316    0\n",
              " 356     0\n",
              "        ..\n",
              " 9225    0\n",
              " 4859    0\n",
              " 3264    0\n",
              " 9845    0\n",
              " 2732    1\n",
              " Name: Exited, Length: 8000, dtype: int64, 9394    0\n",
              " 898     1\n",
              " 2398    0\n",
              " 5906    0\n",
              " 2343    0\n",
              "        ..\n",
              " 1037    0\n",
              " 2899    0\n",
              " 9549    0\n",
              " 2740    0\n",
              " 6690    0\n",
              " Name: Exited, Length: 2000, dtype: int64)"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ],
      "source": [
        "y_train,y_test"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "JRWzzxqDk5aJ"
      },
      "execution_count": 71,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [],
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}